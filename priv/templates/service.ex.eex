defmodule <%= mod_name %>.Service do
  @moduledoc false
  use GRPC.Service, name: <%= inspect(name) %>

  <%= if not is_nil(desc) do %>
  def descriptor do
    # credo:disable-for-next-line
    <%= desc.__struct__ %>.decode(
      <%= desc.__struct__.encode(desc |> Map.from_struct() |> Enum.filter(fn {_, x} -> x != nil end) |> desc.__struct__.new()) |> inspect(limit: :infinity) %>
    )
  end
  <% end %>

<%= Enum.map methods, fn(%{name: name, input: input, output: output}) -> %>
  rpc <%= ":#{name}, #{input}, #{output}" %>
<% end %>
end

defmodule <%= mod_name %>.Stub do
  @moduledoc false
  use GRPC.Stub, service: <%= mod_name %>.Service
end

defmodule <%= mod_name %>.Behaviour do
  <%= docs %>

  <%= methods |> Enum.flat_map(fn m ->
    cb_str = "@callback #{m[:handler_name]}(input :: #{m[:input]}.t(), stream :: GRPC.Server.Stream.t()) :: #{m[:output]}.t()"

    if String.length(String.trim(m[:docs])) > 0 do
      ["", "@doc \"\"\"", m[:docs], "\"\"\"", cb_str, ""]
    else
      [cb_str]
    end
  end) |> Enum.join("\n") %>


  @optional_callbacks <%= methods |> Enum.map_join(", ", fn m ->
    "#{m[:handler_name]}: 2"
  end) %>
end
